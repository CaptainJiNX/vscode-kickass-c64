<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>fileTypes</key>
	<array>
		<string>.asm</string>
		<string>.inc</string>
		<string>.s</string>
		<string>.a</string>
		<string>.lib</string>
	</array>
	<key>name</key>
	<string>KickAssembler (C64)</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>match</key>
			<string>\b(adc|and|asl|bit|clc|cld|cli|clv|cmp|cpx|cpy|dec|dex|dey|eor|inc|inx|iny|lda|ldx|ldy|lsr|nop|ora|pha|php|pla|plp|rol|ror|sbc|sec|sed|sei|sta|stx|sty|tax|txa|tay|tya|tsx|txs)\b</string>
			<key>name</key>
			<string>keyword</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(aac|aax|alr|anc|ane|arr|aso|asr|atx|axa|axs|dcm|dcp|dop|hlt|ins|isb|isc|jam|kil|lae|lar|las|lax|lse|lxa|oal|rla|rra|sax|sbx|skb|sha|shs|say|shx|shy|slo|skw|sre|sxa|sya|tas|top|xaa|xas)\b</string>
			<key>name</key>
			<string>illegal</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(bcc|bcs|beq|bmi|bne|bpl|brk|bvc|bvs|jmp|jsr|rti|rts)\b</string>
			<key>name</key>
			<string>keyword.control</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>/\*</string>
			<key>captures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.comment</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\*/\n?</string>
			<key>name</key>
			<string>comment.block</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>//</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.comment</string>
				</dict>
			</dict>
			<key>end</key>
			<string>$\n?</string>
			<key>name</key>
			<string>comment.line.double-slashs</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.kickass</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(?:^|\s)(\.(word|byte|text|dword))\b</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(CmdArgument)\b</string>
			<key>name</key>
			<string>storage.type.kickass</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(getNamespace)\b</string>
			<key>name</key>
			<string>support.function.language</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(toIntString|toBinaryString|toOctalString|toHexString)\b</string>
			<key>name</key>
			<string>support.function.string</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(abs|acos|asin|atan|atan2|cbrt|ceil|cos|cosh|exp|expm1|floor|hypot|IEEEremainder|log|log10|log1p|max|min|pow|mod|random|round|signum|sin|sinh|sqrt|tan|tanh|toDegrees|toRadians)\b</string>
			<key>name</key>
			<string>support.function.math</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(LoadBinary|LoadPicture|LoadSid|createFile)\b</string>
			<key>name</key>
			<string>support.function.file</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(Matrix|RotationMatrix|ScaleMatrix|MoveMatrix|PerspectiveMatrix|Vector)\b</string>
			<key>name</key>
			<string>support.function.3d</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.keyword.kickass.field</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(?:^|\s)(\.(var|label|const))\b</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.kickass.function.object</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(?:^|\s)(\.(struct|enum))\b</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.kickass.function</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(?:^|\s)(\.(eval|fill|print|printnow|import|align|assert|asserterror|error))\b</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.kickass</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(?:^|\s)(\.(pc|importonce|pseudopc|return|eval))\b</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.kickass</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(?:^\s*|;\s*)(\*)(?=\s*\=\s*)</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(?:^|\s)(\.(encoding))\b</string>
			<key>name</key>
			<string>keyword.kickass.encoding</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.kickass.preprocessor</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>constant.kickass.preprocessor</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(?:^\s*|;\s*)(\#(define|elif|if|undef))\s+(([A-Za-z_][A-Za-z0-9_]*)+)\b</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.kickass.preprocessor</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(?:^\s*|;\s*)(\#(else|endif|importonce))\b</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.kickass.preprocessor</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(?:^\s*|;\s*)(\#(import))(?=\s+\".*\")</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.kickass.preprocessor</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>constant.kickass.preprocessor</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(?:^\s*|;\s*)(\#(importif))\s+!*(([A-Za-z_][A-Za-z0-9_]*)+)(?=\s+\".*\")</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(true|false)\b</string>
			<key>name</key>
			<string>constant.language</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(BLACK|WHITE|RED|CYAN|PURPLE|GREEN|BLUE|YELLOW|ORANGE|BROWN|LIGHT_RED|DARK_GRAY|GRAY|DARK_GREY|GREY|LIGHT_GREEN|LIGHT_BLUE|LIGHT_GRAY|LIGHT_GREY)\b</string>
			<key>name</key>
			<string>constant.language.color</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(LDA_IMM|LDA_ZP|LDA_ZPX|LDX_ZPY|LDA_IZPX|LDA_IZPY|LDA_ABS|LDA_ABSX|LDA_ABSY|JMP_IND|BNE_REL|RTS)\b</string>
			<key>name</key>
			<string>constant.language.opcodes</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(BF_C64FILE|BF_BITMAP_SINGLECOLOR|BF_KOALA|BF_FLI)\b</string>
			<key>name</key>
			<string>constant.language.file</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(AT_ABSOLUTE|AT_ABSOLUTEX|AT_ABSOLUTEY|AT_IMMEDIATE|AT_INDIRECT|AT_IZEROPAGEX|AT_IZEROPAGEY|AT_NONE)\b</string>
			<key>name</key>
			<string>constant.language.pseudocommand</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(PI|E)\b</string>
			<key>name</key>
			<string>constant.language.math</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(Hashtable)\b</string>
			<key>name</key>
			<string>storage.type.hashtable</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.list</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>variable.parameter</string>
				</dict>
			</dict>
			<key>match</key>
			<string>\b(list|List)\(\s*(\$?\d+)*\s*\)</string>
			<key>name</key>
			<string>list</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.for</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>storage.type.for</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(?:^|\s)(\.for)\s*\((var)\b</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.if</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(?:^|\s)((\.if)\b|(else)\b)</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.while</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(?:^|\s)(\.while)(?=\s*\(.*\))</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>"</string>
			<key>end</key>
			<string>"</string>
			<key>name</key>
			<string>string.quoted.double.untitled</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\\.</string>
					<key>name</key>
					<string>constant.character.escape</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>meta.filenamespace.identifier</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.type.filenamespace</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>entity.name.filenamespace</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(?:^\s*|;\s*)((\.filenamespace)\s*([A-Za-z_][A-Za-z0-9_]*))\b</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>meta.namespace.identifier</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.type.namespace</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>entity.name.namespace</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(?:^\s*|;\s*)((\.namespace)\s*([A-Za-z_][A-Za-z0-9_]*))\b</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>meta.label.identifier</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.label</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(?:^\s*|;\s*)(((!)|(!?(\@*[A-Za-z_][A-Za-z0-9_]*)+))\:)</string>
			<key>name</key>
			<string>label</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>meta.pseudocommand.identifier</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>storage.type.pseudocommand</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>entity.name.pseudocommand</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(?:^\s*|;\s*)((\.pseudocommand)\s*(\@*[A-Za-z_][A-Za-z0-9_]*))\b</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>meta.label.identifier</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>storage.type.function</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>entity.name.function</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(?:^\s*|;\s*)((\.function)\s*(\@*[A-Za-z0-9_]*))\b</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>meta.macro.identifier</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>storage.type.macro</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>entity.name.macro</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(?:^\s*|;\s*)((\.macro)\s*(\@*[A-Za-z_][A-Za-z0-9_]*))\b</string>
		</dict>
		<dict>
			<key>match</key>
			<string>#?\$\h+</string>
			<key>name</key>
			<string>constant.numeric.hex</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b\d+</string>
			<key>name</key>
			<string>constant.numeric.decimal</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\#?%[01]+</string>
			<key>name</key>
			<string>constant.numeric.binary</string>
		</dict>
	</array>
	<key>scopeName</key>
	<string>source.assembly.kickassembler</string>
	<key>uuid</key>
	<string>107f6c61-6808-4778-893e-8fb1cbb81f30</string>
</dict>
</plist>
